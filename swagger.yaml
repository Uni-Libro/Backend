openapi: 3.0.0
tags:
- name: users
  description: Users API
- name: books
  description: Books API
- name: Auth
  description: Authentication API
- name: authors
  description: Authors API
- name: categories
  description: Categories API
- name: vouchers
  description: vouchers API

paths:
# [GET] users
  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] users
    post:
      tags:
      - users
      summary: Add User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] users/id
    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] users/id
    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /signup:
    post:
      tags:
      - Auth
      summary: the user sign up to server
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'OK'
        500:
          description: 'Server Error'



  /profile:
    put:
      tags:
      - users
      summary: update user data
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'OK'
        500:
          description: 'Server Error'
    get:
      tags:
      - users
      summary: get user profile
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'
  /login:
    post:
      tags:
      - Auth
      summary: the user login to server
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/auth'
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'
  
  /logout:
    post:
      tags:
      - Auth
      summary: the user logout
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

  /validate:
    post:
      tags:
      - Auth
      summary: the user token is valid or not
      parameters:
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'OK'
        401:
          description: 'invalid token'
        404:
          description: 'Authentication token missing'
        500:
          description: 'Server Error'

# [GET] books
  /books:
    get:
      tags:
      - books
      summary: Find All Books
      parameters:
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] books
    post:
      tags:
      - books
      summary: Add Book
      parameters:
      - name: body
        in: body
        description: book Data
        required: true
        schema:
          $ref: '#/definitions/books'
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] books/id
  /books/{id}:
    get:
      tags:
      - books
      summary: Find Book By Id
      parameters:
      - name: id
        in: path
        description: Book Id
        required: true
        type: integer
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] books/id
    put:
      tags:
      - books
      summary: Update Book By Id
      parameters:
      - name: id
        in: path
        description: book Id
        required: true
        type: integer
      - name: body
        in: body
        description: book Data
        required: true
        schema:
          $ref: '#/definitions/books'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] books/id
    delete:
      tags:
      - books
      summary: Delete Book By Id
      parameters:
      - name: id
        in: path
        description: book Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] authors
  /authors:
    get:
      tags:
      - authors
      summary: Find All authors
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] authors
    post:
      tags:
      - authors
      summary: Add author
      parameters:
      - name: body
        in: body
        description: author Data
        required: true
        schema:
          $ref: '#/definitions/authors'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] authors/id
  /authors/{id}:
    get:
      tags:
      - authors
      summary: Find author By Id
      parameters:
      - name: id
        in: path
        description: author Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] authors/id
    put:
      tags:
      - authors
      summary: Update author By Id
      parameters:
      - name: id
        in: path
        description: author Id
        required: true
        type: integer
      - name: body
        in: body
        description: author Data
        required: true
        schema:
          $ref: '#/definitions/authors'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] author/id
    delete:
      tags:
      - authors
      summary: Delete Author By Id
      parameters:
      - name: id
        in: path
        description: author Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] categories
  /categories:
    get:
      tags:
      - categories
      summary: Find All categories
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] categories
    post:
      tags:
      - categories
      summary: Add category
      parameters:
      - name: body
        in: body
        description: category Data
        required: true
        schema:
          $ref: '#/definitions/categories'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] categories/id
  /categories/{id}:
    get:
      tags:
      - categories
      summary: Find category By Id
      parameters:
      - name: id
        in: path
        description: category Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] categories/id
    put:
      tags:
      - categories
      summary: Update category By Id
      parameters:
      - name: id
        in: path
        description: category Id
        required: true
        type: integer
      - name: body
        in: body
        description: category Data
        required: true
        schema:
          $ref: '#/definitions/categories'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] categories/id
    delete:
      tags:
      - categories
      summary: Delete category By Id
      parameters:
      - name: id
        in: path
        description: category Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

#  bookmarks
  /bookmarks:
    get:
      tags:
      - bookmarks
      summary: get all Bookmarks
      parameters:
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'All bookmarks'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'
    delete:
      tags:
      - bookmarks
      summary: remove Bookmark
      parameters:
      - name: body
        in: body
        description: bookmarks Data
        required: true
        schema:
          $ref: '#/definitions/bookmarks'
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'removed, no content'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'
    post:
      tags:
      - bookmarks
      summary: Add Bookmark
      parameters:
      - name: body
        in: body
        description: bookmarks Data
        required: true
        schema:
          $ref: '#/definitions/bookmarks'
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  /voucher/apply:
    post:
      tags:
      - cart
      summary: get all books in the cart and apply voucher
      parameters:
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      - name: body
        in: body
        description: the voucher code
        required: false
        schema:
          type: object
          properties:
            voucherCode:
              type: string
              description: the voucher code

      responses:
        200:
          description: 'All books in cart'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  /cart:
    get:
      tags:
      - cart
      summary: get all books in the cart
      parameters:
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'All books in cart'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'
    delete:
      tags:
      - cart
      summary: remove from cart
      parameters:
      - name: body
        in: body
        description: cart Data
        required: true
        schema:
          $ref: '#/definitions/cart'
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'removed, no content'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'
    post:
      tags:
      - cart
      summary: Add to cart
      parameters:
      - name: body
        in: body
        description: cart Data
        required: true
        schema:
          $ref: '#/definitions/cart'
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  /vouchers:
    get:
      tags:
      - vouchers
      parameters:
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      summary: Find All vouchers
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] vouchers
    post:
      tags:
      - vouchers
      summary: Add voucher
      parameters:
      - name: body
        in: body
        description: voucher Data
        required: true
        schema:
          $ref: '#/definitions/vouchers'
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] vouchers/id
  /vouchers/{id}:
    get:
      tags:
      - vouchers
      summary: Find voucher By Id
      parameters:
      - name: id
        in: path
        description: voucher Id
        required: true
        type: integer
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] vouchers/id
    put:
      tags:
      - vouchers
      summary: Update voucher By Id
      parameters:
      - name: id
        in: path
        description: voucher Id
        required: true
        type: integer
      - name: body
        in: body
        description: voucher Data
        required: true
        schema:
          $ref: '#/definitions/vouchers'
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] voucher/id
    delete:
      tags:
      - vouchers
      summary: Delete voucher By Id
      parameters:
      - name: id
        in: path
        description: voucher Id
        required: true
        type: integer
      - name: Authorization
        in: header
        description: the user token
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'


# definitions
definitions:
  users:
    type: object
    required:
        - email
        - password
        - username
        - firstName
        - lastName
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password
      username:
        type: string
        description: user username
      firstName:
        type: string
        description: user firstName
      lastName:
        type: string
        description: user LastName
  auth:
    type: object
    required:
        - password
        - username
    properties:
      username:
        type: string
        description: user username
      password:
        type: string
        description: user Password
  books:
    type: object
    required:
        - name
        - imageUrl
        - authorName
        - description
        - price
        - category
    properties:
      id:
        type: integer
        description: the id of book
      name:
        type: string
        description: the book name
      authorName:
        type: string
        description: the author name
      imageUrl:
        type: string
        description: the image of book
      description:
        type: string
        description: the description about book
      price:
        type: integer
        description: the price of book
      category:
        type: string
        description: the category that book belongs to
  authors:
    type: object
    required:
        - id
        - name
        - imageUrl
        - description
    properties:
      id:
        type: integer
        description: the id of author
      name:
        type: string
        description: the author name
      imageUrl:
        type: string
        description: the image of author
      description:
        type: string
        description: the description about author
  categories:
    type: object
    required:
        - id
        - name
    properties:
      id:
        type: integer
        description: the id of category
      name:
        type: string
        description: the category name
  bookmarks:
    type: object
    required:
        - bookId
    properties:
      bookId:
        type: number
        description: the book ID
  cart:
    type: object
    required:
        - bookId
    properties:
      bookId:
        type: number
        description: the book ID
  vouchers:
    type: object
    required:
        - code
    properties:
      code:
        type: string
        description: the code that can apply
      discount:
        type: string
        description: the discount that can apply
      upTo:
        type: string
        description: the up to price
      validFrom:
        type: date
        description: the time that code is valid
      validTo:
        type: date
        description: the time that code is not valid


schemes:
 - https
 - http
